
name: CI Pipeline

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        branch: [master, dev, feature/*, version/*, other]
    env:
      Solution: 'Assure-IT.sln'
      Msbuild: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe'
      BranchName: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up NuGet
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bOR [Net.SecurityProtocolType]::Tls12
          Get-PackageProvider -Name NuGet -ForceBootstrap
        shell: pwsh

      - name: Install NuGet dependencies
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bOR [Net.SecurityProtocolType]::Tls12
          cd ".\\PowerShell Deploy\\nuget"
          & .\\nuget.exe install Microsoft.SqlServer.DacFx.x64 -o packages
          cd "${{ github.workspace }}"
        shell: pwsh

      - name: Set version number
        run: |
          Switch -Wildcard ($env:BranchName) {
            "master"    { $VersionNumber = "${{ env.MajorVersionNumber }}.${{ env.MinorVersionNumber }}.${{ github.sha.Substring(0, 8) }}-master" }
            "dev"       { $VersionNumber = "${{ env.MajorVersionNumber }}.${{ env.MinorVersionNumber }}.${{ github.sha.Substring(0, 8) }}-dev" }
            "feature/*" { $VersionNumber = ("${{ env.MajorVersionNumber }}.${{ env.MinorVersionNumber }}.${{ github.sha.Substring(0, 8) }}-{0}" -f $env:BranchName.Substring($env:BranchName.IndexOf("/")).Trim("/")) }
            "version/*" { $VersionNumber = $env:BranchName.Substring($env:BranchName.IndexOf("/")).Trim("/v").Trim("/") + ".${{ github.sha.Substring(0, 8) }}" }
            default     { $VersionNumber = ("${{ env.MajorVersionNumber }}.${{ env.MinorVersionNumber }}.${{ github.sha.Substring(0, 8) }}-{0}") -f $env:BranchName.Replace("/", "-") }
          }
          Write-Host "Version number for the build: $VersionNumber"
          Write-Host "Creating VERSION file in the root"
          Out-File -FilePath ".\\VERSION" -Encoding ASCII -InputObject $VersionNumber
          Write-Host "Version Number for this build is $VersionNumber"
        shell: pwsh

      - name: Build solution
        run: & "$env:Msbuild" "$env:Solution" /p:Configuration=Release
        shell: pwsh

      - name: Rename DACPAC files
        run: |
          $FilePattern = ".\\Assure-IT\\bin\\Release\\*.dacpac"
          $Files = (Get-ChildItem -Path $FilePattern | Where-Object { $_.Name -notin ("master.dacpac", "msdb.dacpac")})
          ForEach ($File In $Files) {
            Move-Item -Path $File.FullName -Destination ($File.FullName.Replace(".dacpac", "-v$VersionNumber.dacpac"))
          }
        shell: pwsh

      - name: Update install script
        run: |
          $PathToPowerShell = ".\\PowerShell Deploy\\Install Assure-IT.ps1"
          $PowerShell = (Get-Content $PathToPowerShell)
          $PowerShell = $PowerShell.Replace("`$dacpacPath = `"`"", "`$dacpacPath = `"..\\Assure-IT\\DacPac\\Assure-IT-v$VersionNumber.dacpac`"")
          $PowerShell | Out-File -FilePath $PathToPowerShell -Encoding utf8
        shell: pwsh

      - name: Package artifacts
        run: |
          New-Item -Name ".\\Assure-IT\\DacPac" -ItemType Directory
          New-Item -Name ".\\PowerShell Deploy\\nuget\\Dependencies" -ItemType Directory
          Move-Item -Path ".\\Assure-IT\\bin\\Release\\*" -Destination ".\\Assure-IT\\DacPac"
          Move-Item -Path ".\\PowerShell Deploy\\nuget\\packages\\Microsoft*" -Destination ".\\PowerShell Deploy\\Dependencies"
          Remove-Item -Path ".\\PowerShell Deploy\\Dependencies\\*.nupkg"
        shell: pwsh

      - name: Run Pester tests
        run: |
          try {
            $result = Invoke-Pester -ExcludeTag "RequiresSql" -OutputFile "pester_xml.xml" -OutputFormat NUnitXml -PassThru -Strict -ErrorAction Stop
            if ($result.FailedCount -gt 0) {
              throw "{0} tests did not pass" -f $result.FailedCount
            }
          }
          catch {
            $msg = $_
            Write-Error -ErrorRecord $msg
            exit 1
          }
        shell: pwsh

    artifacts:
      name: "${{ env.ArtifactName }}.${{ env.MajorVersionNumber }}.${{ env.MinorVersionNumber }}.${{ github.sha.Substring(0, 8) }}-${{ github.ref_name }}"
      paths:
        - "Assure-IT/DacPac/*"
        - "PowerShell Deploy/EIT.PowerShell.AssureIT/Private/*"
        - "PowerShell Deploy/EIT.PowerShell.AssureIT/Public/*"
        - "PowerShell Deploy/EIT.PowerShell.AssureIT/EIT.PowerShell.AssureIT.*"
        - "PowerShell Deploy/*.*"
        - "PowerShell Deploy/Dependencies/*"
        - "VERSION"
      expire_in: 1 week
