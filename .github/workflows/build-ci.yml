name: Assure-IT Build & Test Pipeline

on:
  push:
    branches:
      - '**'

env:
  Solution: 'Assure-IT.sln'
  Msbuild: 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe'
  ArtifactName: 'AssureIT'
  MajorVersionNumber: '1'
  MinorVersionNumber: '1'

jobs:
  setup:
    runs-on: windows-latest
    outputs:
      version_number: ${{ steps.set_version.outputs.version_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Confirm MSBuild path exists
        shell: pwsh
        run: |
          if (!(Test-Path "$env:Msbuild")) {
            Write-Error "MSBuild not found at path: $env:Msbuild"
            exit 1
          } else {
            Write-Host "MSBuild found at $env:Msbuild"
          }
      - name: Set version number
        id: set_version
        shell: pwsh
        run: |
          $branchName = "${{ github.ref_name }}"
          $sha = "${{ github.sha }}"
          $shortSha = $sha.Substring(0, 8)

          Switch -Wildcard ($branchName) {
            "master" {
              $VersionNumber = "${env:MajorVersionNumber}.${env:MinorVersionNumber}.$shortSha-master"
            }
            "dev" {
              $VersionNumber = "${env:MajorVersionNumber}.${env:MinorVersionNumber}.$shortSha-dev"
            }
            "feature/*" {
              $suffix = $branchName.Substring($branchName.IndexOf("/") + 1)
              $VersionNumber = "${env:MajorVersionNumber}.${env:MinorVersionNumber}.$shortSha-$suffix"
            }
            "version/*" {
              $suffix = $branchName.Substring($branchName.IndexOf("/")).Trim("/v").Trim("/")
              $VersionNumber = "$suffix.$shortSha"
            }
            Default {
              $VersionNumber = "${env:MajorVersionNumber}.${env:MinorVersionNumber}.$shortSha-" + $branchName.Replace("/", "-")
            }
          }

          Write-Host "Version number for the build: $VersionNumber"
          echo "version_number=$VersionNumber" >> $env:GITHUB_OUTPUT
          Set-Content -Path .\VERSION -Value $VersionNumber

  build_other:
    needs: setup
    if: |
      github.ref_name != 'master' &&
      github.ref_name != 'dev'
    uses: ./.github/workflows/reusable-build.yml
    with:
      version_number: ${{ needs.setup.outputs.version_number }}
      artifact_name: ${{ env.ArtifactName }}
      retnetion_days: 1
  build_dev:
    needs: setup
    if: |
      github.ref_name = 'dev'
    uses: ./.github/workflows/reusable-build.yml
    with:
      version_number: ${{ needs.setup.outputs.version_number }}
      artifact_name: ${{ env.ArtifactName }}
      retnetion_days: 1
  build_master:
    needs: setup
    if: |
      github.ref_name = 'master'
    uses: ./.github/workflows/reusable-build.yml
    with:
      version_number: ${{ needs.setup.outputs.version_number }}
      artifact_name: ${{ env.ArtifactName }}
      retnetion_days: 1

  test:
    needs: [build]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Pester Tests
        shell: pwsh
        run: |
          try {
            $result = Invoke-Pester -ExcludeTag "RequiresSql" -OutputFile "pester_xml.xml" -OutputFormat NUnitXml -PassThru -Strict -ErrorAction Stop
            if ($result.FailedCount -gt 0) {
              throw "$($result.FailedCount) tests did not pass"
            }
          } catch {
            Write-Error $_
            exit 1
          }
