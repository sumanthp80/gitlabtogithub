name: Assure-IT Build & Test Pipeline

on:
  push:
    branches:
      - '**'

env:
  Solution: 'Assure-IT.sln'
  Msbuild: 'C:\\Program Files\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe'
  ArtifactName: 'AssureIT'
  MajorVersionNumber: '3'
  MinorVersionNumber: '0'

jobs:
  setup:
    runs-on: windows-2019
    outputs:
      version_number: ${{ steps.set_version.outputs.version_number }}
      retention_days: ${{ steps.set_version.outputs.retention_days }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Confirm MSBuild path exists
        shell: pwsh
        run: |
          if (!(Test-Path "$env:Msbuild")) {
            Write-Error "MSBuild not found at path: $env:Msbuild"
            exit 1
          } else {
            Write-Host "MSBuild found at $env:Msbuild"
          }
      - name: Set version number
        id: set_version
        shell: pwsh
        run: |
          $branchName = "${{ github.ref_name }}"
          $sha = "${{ github.sha }}"
          $shortSha = $sha.Substring(0, 8)

          Switch -Wildcard ($branchName) {
            "master" {
              $VersionNumber = "${env:MajorVersionNumber}.${env:MinorVersionNumber}.$shortSha-master"
              $RetentionDays = 365
            }
            "dev" {
              $VersionNumber = "${env:MajorVersionNumber}.${env:MinorVersionNumber}.$shortSha-dev"
              $RetentionDays = 7
            }
            "feature/*" {
              $suffix = $branchName.Substring($branchName.IndexOf("/") + 1)
              $VersionNumber = "${env:MajorVersionNumber}.${env:MinorVersionNumber}.$shortSha-$suffix"
              $RetentionDays = 1
            }
            "version/*" {
              $suffix = $branchName.Substring($branchName.IndexOf("/")).Trim("/v").Trim("/")
              $VersionNumber = "$suffix.$shortSha"
              $RetentionDays = 1
            }
            Default {
              $VersionNumber = "${env:MajorVersionNumber}.${env:MinorVersionNumber}.$shortSha-" + $branchName.Replace("/", "-")
              $RetentionDays = 1
            }
          }

          Write-Host "Version number for the build: $VersionNumber"
          Write-Host "Retention Days for the Artifact: $RetentionDays"
          echo "version_number=$VersionNumber" >> $env:GITHUB_OUTPUT
          echo "retention_days=$RetentionDays" >> $env:GITHUB_OUTPUT
          Set-Content -Path .\VERSION -Value $VersionNumber

  build:
    needs: setup
    runs-on: windows-2019
    env:
      VersionNumber: ${{ needs.setup.outputs.version_number }}
    # if: |
    #   github.ref_name != 'master' &&
    #   github.ref_name != 'dev'
    steps:  
      - uses: actions/checkout@v4

      - name: Write VERSION file from setup output
        shell: pwsh
        run: |
          Set-Content -Path .\VERSION -Value "${{ env.VersionNumber }}"

      - name: Build Solution
        shell: pwsh
        run: |
          & "$env:Msbuild" "$env:Solution" /p:Configuration=Release

      - name: Rename DACPAC
        shell: pwsh
        run: |
          $VersionNumber = Get-Content .\VERSION
          $FilePattern = ".\Assure-IT\bin\Release\*.dacpac"
          $Files = Get-ChildItem -Path $FilePattern | Where-Object { $_.Name -notin ("master.dacpac", "msdb.dacpac") }
          ForEach ($File In $Files) {
            Move-Item -Path $File.FullName -Destination ($File.FullName.Replace(".dacpac", "-v$VersionNumber.dacpac"))
          }

      - name: Update Install Script
        shell: pwsh
        run: |
          $VersionNumber = Get-Content .\VERSION
          $PathToPowerShell = ".\PowerShell Deploy\Install Assure-IT.ps1"
          $PowerShell = (Get-Content $PathToPowerShell) -replace '`\$dacpacPath = `"`"', "`$dacpacPath = `"..\Assure-IT\DacPac\Assure-IT-v$VersionNumber.dacpac`""
          $PowerShell | Set-Content -Path $PathToPowerShell

      - name: Bootstrap NuGet
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Get-PackageProvider -Name NuGet -ForceBootstrap

      - name: Download NuGet Dependencies
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          cd ".\PowerShell Deploy\nuget"
          & .\nuget.exe install Microsoft.SqlServer.DacFx.x64 -o packages
          cd "${{ github.workspace }}"

      - name: Package Artifacts
        shell: pwsh
        run: |
          New-Item -Name ".\Assure-IT\DacPac" -ItemType Directory -Force
          New-Item -Name ".\PowerShell Deploy\nuget\Dependencies" -ItemType Directory -Force
          Move-Item -Path ".\Assure-IT\bin\Release\*" -Destination ".\Assure-IT\DacPac"
          Move-Item -Path ".\PowerShell Deploy\nuget\packages\Microsoft*" -Destination ".\PowerShell Deploy\Dependencies"
          Remove-Item -Path ".\PowerShell Deploy\Dependencies\*.nupkg"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        # continue-on-error: true
        with:
          name: ${{ env.ArtifactName }}.${{ env.VersionNumber }}
          retention-days: ${{ env.RetentionDays }}
          path: |
            Assure-IT/DacPac/*
            PowerShell Deploy/**/*.*
            VERSION

  test:
    needs: [build]
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4

      - name: Run Pester Tests
        shell: pwsh
        run: |
          try {
            $result = Invoke-Pester -ExcludeTag "RequiresSql" -OutputFile "pester_xml.xml" -OutputFormat NUnitXml -PassThru -Strict -ErrorAction Stop
            if ($result.FailedCount -gt 0) {
              throw "$($result.FailedCount) tests did not pass"
            }
          } catch {
            Write-Error $_
            exit 1
          }
