# .github/workflows/reusable-build.yml
name: Reusable Build & Test
on:
  workflow_call:
    inputs:
      version_number:
        required: true
        type: string
      artifact_name:
        required: true
        type: string
      retention_days:
        required: true
        type: string
      # msbuild_path:
      #   required: true
      #   type: string
jobs:
  build:
    runs-on: windows-latest
    env:
      VersionNumber: ${{ inputs.version_number }}
      ArtifactName: ${{ inputs.artifact_name }}
      RetentionDays: ${{ inputs.retention_days }}
      # Msbuild: ${{ inputs.msbuild_path }}
      Msbuild: 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe'
    steps:  
      - uses: actions/checkout@v4

      - name: Write VERSION file from setup output
        shell: pwsh
        run: |
          Set-Content -Path .\VERSION -Value "${{ env.VersionNumber }}"

      - name: Build Solution
        shell: pwsh
        run: |
          & "$env:Msbuild" "$env:Solution" /p:Configuration=Release

      - name: Rename DACPAC
        shell: pwsh
        run: |
          $VersionNumber = Get-Content .\VERSION
          $FilePattern = ".\Assure-IT\bin\Release\*.dacpac"
          $Files = Get-ChildItem -Path $FilePattern | Where-Object { $_.Name -notin ("master.dacpac", "msdb.dacpac") }
          ForEach ($File In $Files) {
            Move-Item -Path $File.FullName -Destination ($File.FullName.Replace(".dacpac", "-v$VersionNumber.dacpac"))
          }

      - name: Update Install Script
        shell: pwsh
        run: |
          $VersionNumber = Get-Content .\VERSION
          $PathToPowerShell = ".\PowerShell Deploy\Install Assure-IT.ps1"
          $PowerShell = (Get-Content $PathToPowerShell) -replace '`\$dacpacPath = `"`"', "`$dacpacPath = `"..\Assure-IT\DacPac\Assure-IT-v$VersionNumber.dacpac`""
          $PowerShell | Set-Content -Path $PathToPowerShell

      - name: Bootstrap NuGet
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Get-PackageProvider -Name NuGet -ForceBootstrap

      - name: Download NuGet Dependencies
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          cd ".\PowerShell Deploy\nuget"
          & .\nuget.exe install Microsoft.SqlServer.DacFx.x64 -o packages
          cd "${{ github.workspace }}"

      - name: Package Artifacts
        shell: pwsh
        run: |
          New-Item -Name ".\Assure-IT\DacPac" -ItemType Directory -Force
          New-Item -Name ".\PowerShell Deploy\nuget\Dependencies" -ItemType Directory -Force
          Move-Item -Path ".\Assure-IT\bin\Release\*" -Destination ".\Assure-IT\DacPac"
          Move-Item -Path ".\PowerShell Deploy\nuget\packages\Microsoft*" -Destination ".\PowerShell Deploy\Dependencies"
          Remove-Item -Path ".\PowerShell Deploy\Dependencies\*.nupkg"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        # continue-on-error: true
        with:
          name: ${{ env.ArtifactName }}.${{ env.VersionNumber }}
          retention-days: ${{ env.Retention_Days }}
          path: |
            Assure-IT/DacPac/*
            PowerShell Deploy/**/*.*
            VERSION
  
  test:
    needs: [build]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Pester Tests
        shell: pwsh
        run: |
          try {
            $result = Invoke-Pester -ExcludeTag "RequiresSql" -OutputFile "pester_xml.xml" -OutputFormat NUnitXml -PassThru -Strict -ErrorAction Stop
            if ($result.FailedCount -gt 0) {
              throw "$($result.FailedCount) tests did not pass"
            }
          } catch {
            Write-Error $_
            exit 1
          }

